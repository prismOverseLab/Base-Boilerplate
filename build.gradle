plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
}

allprojects {
	group = 'com.github.prismOverseLab'
	version = '0.0.1'
	sourceCompatibility = '17'

	repositories {
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	ext {
		springCloudVersion = '2023.0.1'
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-actuator'

		runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
		runtimeOnly('com.h2database:h2')

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}

	tasks.named('test') {
		useJUnitPlatform()
		finalizedBy 'jacocoTestReport'
	}

	jacocoTestReport {
		reports {
			html.destination file("$buildDir/jacoco/report.html")
		}

		finalizedBy 'jacocoTestCoverageVerification'
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				enabled = true
				element = 'CLASS'

				limit {
					counter = 'LINE'
					value = 'COVEREDRATIO'
					minimum = 0.00  // update
				}

				limit {
					counter = 'BRANCH'
					value = 'COVEREDRATIO'
					minimum = 0.00
				}

				limit {
					counter = 'LINE'
					value = 'TOTALCOUNT'
					maximum = 500
				}
			}
		}
	}
}




